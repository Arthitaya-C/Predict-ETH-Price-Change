# -*- coding: utf-8 -*-
"""predict_change.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1diewYsRy09vzMj8GB4-rWheFhCtPVFsf
"""

import pandas as pd

df_ethusd = pd.read_csv("Ethereum.csv") 
df_ethusd.head()

print(df_ethusd.shape)

df_ethusd.dtypes

df_ethusd.columns

category = df_ethusd['Change'].to_list()

unique_category = list(set(category))
unique_category

from sklearn.preprocessing import LabelEncoder
label = LabelEncoder()
df_ethusd['Change'] = label.fit_transform(df_ethusd.Change)

x = df_ethusd.drop('Change', axis = 'columns')
x = x.drop('Date', axis = 'columns')
y = df_ethusd['Change']

x.shape

import numpy as np
y = np.array(y).reshape(len(y), 1)
y.shape

from sklearn.model_selection import train_test_split

train, test, y, y_test = train_test_split(x,y, test_size=0.2, shuffle=True,random_state=1)

train.shape, y.shape

from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
scaler.fit(train)
train = scaler.transform(train)
test = scaler.transform(test)

"""#ANN"""

from sklearn.neural_network import MLPClassifier
mlp = MLPClassifier(hidden_layer_sizes =(15,15,15), max_iter = 1000, activation= 'relu')

mlp.fit(train,y)

from sklearn.metrics import confusion_matrix
result_ann = mlp.predict(test)
cm_ann = confusion_matrix(y_test, result_ann)

import seaborn as sn
import matplotlib.pyplot as plt

df_cm = pd.DataFrame(cm_ann, range(2), range(2))
plt.figure(figsize=(12,8))
sn.set(font_scale=1.3) # for label size
sn.heatmap(df_cm, annot=True, annot_kws={"size": 25}, fmt='g') # for num predict size

plt.show()

from sklearn.metrics import classification_report
print(classification_report(y_test,result_ann, target_names=unique_category, digits=4))

"""#KNN"""

from sklearn.neighbors import KNeighborsClassifier
knn = KNeighborsClassifier()

knn.fit(train,y)

from sklearn.metrics import confusion_matrix
result_knn = knn.predict(test)
cm_knn = confusion_matrix(y_test, result_knn)

import seaborn as sn
import matplotlib.pyplot as plt

df_cm = pd.DataFrame(cm_knn, range(2), range(2))
plt.figure(figsize=(12,8))
sn.set(font_scale=1.3) # for label size
sn.heatmap(df_cm, annot=True, annot_kws={"size": 25}, fmt='g') # for num predict size

plt.show()

from sklearn.metrics import classification_report
print(classification_report(y_test,result_knn, target_names=unique_category, digits=4))

"""#SVM"""

from sklearn import svm
svm = svm.SVC(kernel="sigmoid")

svm.fit(train,y)

from sklearn.metrics import confusion_matrix
result_svm = svm.predict(test)
cm_svm = confusion_matrix(y_test, result_svm)

import seaborn as sn
import matplotlib.pyplot as plt

df_cm = pd.DataFrame(cm_svm, range(2), range(2))
plt.figure(figsize=(12,8))
sn.set(font_scale=1.3) # for label size
sn.heatmap(df_cm, annot=True, annot_kws={"size": 25}, fmt='g') # for num predict size

plt.show()

from sklearn.metrics import classification_report
print(classification_report(y_test,result_svm, target_names=unique_category, digits=4))



"""#Tree"""

from sklearn.tree import DecisionTreeClassifier
dtree = DecisionTreeClassifier()

dtree.fit(train,y)

from sklearn.metrics import confusion_matrix
result_tree = dtree.predict(test)
cm_tree = confusion_matrix(y_test, result_tree)

import seaborn as sn
import matplotlib.pyplot as plt

df_cm = pd.DataFrame(cm_tree, range(2), range(2))
plt.figure(figsize=(12,8))
sn.set(font_scale=1.3) # for label size
sn.heatmap(df_cm, annot=True, annot_kws={"size": 25}, fmt='g') # for num predict size

plt.show()

from sklearn.metrics import classification_report
print(classification_report(y_test,result_tree, target_names=unique_category, digits=4))



"""#naive bayes"""

from sklearn.naive_bayes import GaussianNB
gnb = GaussianNB()

gnb.fit(train,y)

from sklearn.metrics import confusion_matrix
result_gnb = gnb.predict(test)
cm_gnb = confusion_matrix(y_test, result_gnb)

import seaborn as sn
import matplotlib.pyplot as plt

df_cm = pd.DataFrame(cm_gnb, range(2), range(2))
plt.figure(figsize=(12,8))
sn.set(font_scale=1.3) # for label size
sn.heatmap(df_cm, annot=True, annot_kws={"size": 25}, fmt='g') # for num predict size

plt.show()

from sklearn.metrics import classification_report
print(classification_report(y_test,result_gnb, target_names=unique_category, digits=4))